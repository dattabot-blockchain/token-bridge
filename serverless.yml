service: blockchain-watcher

custom:
  serverless-offline:
    babelOptions:
      presets: ["es2015"]
  webpackIncludeModules:
    webpackConfig: 'webpack.config.js'
    packager: 'npm'

plugins:
  - serverless-offline
  - serverless-offline-scheduler
  - serverless-dynamodb-local
  - serverless-webpack

frameworkVersion: "<=1.28.0"

provider:
  name: aws
  runtime: nodejs8.10
  role: ${env:ROLE}
  region: ${env:REGION}
  stage: ${opt:stage, 'dev'}
  environment:
    MAIN_NETWORK: ${env:MAIN_NETWORK}
    PRIV_NETWORK: ${env:PRIV_NETWORK}
    REGION: ${env:REGION}
    HART_MAIN_ADDRESS: ${env:HART_MAIN_ADDRESS}
    HART_BURN_TOPIC: ${env:HART_BURN_TOPIC}
    HART_PRIV_ADDRESS: ${env:HART_PRIV_ADDRESS}
    MINT_SENDER: ${env:MINT_SENDER}
    MINT_PK: ${env:MINT_PK}
    SHARD_LIMIT: ${env:SHARD_LIMIT}
    TB_WATCHER: ${env:TB_WATCHER}_${self:provider.stage}
    TB_WATCHER_BLOCKS: ${env:TB_WATCHER_BLOCKS}_${self:provider.stage}
    TB_CONTRACT_DETAILS: ${env:TB_CONTRACT_DETAILS}_${self:provider.stage}
    DEBUG: ${env:DEBUG}
  tags:
    Namespace: hara
    Name: hara-blockchain-log-watcher-${self:provider.stage}
    Stage: ${self:provider.stage}
  stackTags:
    Namespace: hara
    Name: hara-blockchain-log-watcher-${self:provider.stage}
    Stage: ${self:provider.stage}

package:
  exclude:
    - node_modules/dynamodb-localhost/**
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**
    - tests/**

functions:
  get_address_transactions:
    handler: handler._getAddressTransaction
    timeout: 10
    events:
    - http:
        path: get_transaction_by_address
        method: get

  get_id_transactions:
    handler: handler._getIDTransaction
    timeout: 10
    events:
    - http:
        path: get_transaction_by_id
        method: get

  get_timestamp_transactions:
    handler: handler._getTimestampTransaction
    timeout: 10
    events:
    - http:
        path: get_transaction_by_timestamp
        method: get
  
  get_data_transactions:
    handler: handler._getDataTransaction
    timeout: 10
    events:
    - http:
        path: get_transaction_by_data
        method: get

  external_request:
    handler: handler._externalRequest
    timeout: 10
    events:
    - http:
        path: external_request
        method: post
  
  upload_data:
    handler: handler._uploadData
    timeout: 10
    events:
    - http:
        path: upload_data
        method: post

  main_watcher:
    handler: handler._mainWatcher
    timeout: 55
    events:
    - schedule: rate(1 minute)

  priv_watcher:
    handler: handler._privWatcher
    timeout: 55
    events:
    - schedule: rate(1 minute)

  manual_mint:
    handler: handler._postManualMint
    timeout: 20
    events:
    - http:
        path: manual_mint
        method: post
    
resources:
  Resources:
    blockchainWatcher:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: part_key
            AttributeType: S
          - AttributeName: id
            AttributeType: S 
          - AttributeName: burn_timestamp 
            AttributeType: S 
          - AttributeName: address
            AttributeType: S 
        KeySchema:
          - AttributeName: part_key
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: address_idx
            KeySchema:
              - AttributeName: part_key
                KeyType: HASH
              - AttributeName: address
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: partkey_burn_idx
            KeySchema:
              - AttributeName: part_key
                KeyType: HASH
              - AttributeName: burn_timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: tb_blockchain_watcher_${self:provider.stage}
    blockchainWatcherBlocks:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: networkid
            AttributeType: S
          - AttributeName: event
            AttributeType: S
        KeySchema:
          - AttributeName: networkid
            KeyType: HASH
          - AttributeName: event
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: tb_blockchain_watcher_blocks_${self:provider.stage}
    contractDetails:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: N
          - AttributeName: contract_network_name
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: contract_network_name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: tb_contract_details_${self:provider.stage}